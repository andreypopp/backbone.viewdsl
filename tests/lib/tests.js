// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var View;
  View = require('backbone.viewdsl').View;
  window.SomeView = (function(_super) {

    __extends(SomeView, _super);

    function SomeView() {
      return SomeView.__super__.constructor.apply(this, arguments);
    }

    return SomeView;

  })(View);
  return describe('View', function() {
    describe('basic DOM rendering', function() {
      it('should construct a view from DOM template', function(done) {
        var promise;
        promise = View.from("<div class=\"some-class\">Hello</div>");
        return promise.then(function(view) {
          expect(view.el.tagName).to.be.equal('DIV');
          expect(view.$el.text()).to.be.equal('Hello');
          expect(view.$el.hasClass('some-class')).to.be.ok;
          return done();
        });
      });
      it('should throw an error if constructing view from multiple elements', function() {
        var buildView;
        buildView = function() {
          return View.from('<div></div><div></div>');
        };
        return expect(buildView).to["throw"](Error);
      });
      return it('should render DOM into view', function(done) {
        var MyView, view;
        MyView = (function(_super) {

          __extends(MyView, _super);

          function MyView() {
            return MyView.__super__.constructor.apply(this, arguments);
          }

          MyView.prototype.render = function() {
            return this.renderDOM("<div class=\"some-class\">Hello</div>");
          };

          return MyView;

        })(View);
        view = new MyView();
        return view.render().then(function() {
          var el;
          expect(view.$el.length).to.be.equal(1);
          el = $(view.$el.children()[0]);
          expect(el[0].tagName).to.be.equal('DIV');
          expect(el.text()).to.be.equal('Hello');
          expect(el.hasClass('some-class')).to.be.ok;
          return done();
        });
      });
    });
    describe('view instantiation', function() {
      it('should instantiate views by global spec', function(done) {
        var promise;
        promise = View.from("<div class=\"some-class\">\n  <div view=\"SomeView\">Some View</div>\n</div>");
        return promise.then(function(view) {
          var subview;
          expect(view.views.length).to.be.equal(1);
          expect(view instanceof View).to.be.ok;
          subview = view.views[0];
          expect(subview.el.tagName).to.be.equal('DIV');
          expect(subview.$el.text()).to.be.equal('Some View');
          expect(subview instanceof SomeView).to.be.ok;
          return done();
        });
      });
      return it('should instantiate view by global spec inside other view', function(done) {
        var MyView, view;
        MyView = (function(_super) {

          __extends(MyView, _super);

          function MyView() {
            return MyView.__super__.constructor.apply(this, arguments);
          }

          MyView.prototype.render = function() {
            return this.renderDOM("<div class=\"some-class\">\n  <div view=\"SomeView\">Some View</div>\n</div>");
          };

          return MyView;

        })(View);
        view = new MyView();
        return view.render().then(function() {
          var subview;
          expect(view.views.length).to.be.equal(1);
          expect(view instanceof View).to.be.ok;
          subview = view.views[0];
          expect(subview.el.tagName).to.be.equal('DIV');
          expect(subview.$el.text()).to.be.equal('Some View');
          expect(subview instanceof SomeView).to.be.ok;
          return done();
        });
      });
    });
    return describe('conditional blocks', function() {
      it('should conditionally render by view property', function(done) {
        var MyView, view;
        MyView = (function(_super) {

          __extends(MyView, _super);

          function MyView() {
            return MyView.__super__.constructor.apply(this, arguments);
          }

          MyView.prototype.initialize = function(options) {
            this.show1 = options.show1;
            return this.show2 = options.show2;
          };

          MyView.prototype.render = function() {
            return this.renderDOM("<div>\n  <div if=\"show1\" class=\"show1\"></div>\n  <div if=\"show2\" class=\"show2\"></div>\n</div>");
          };

          return MyView;

        })(View);
        view = new MyView({
          show1: true,
          show2: false
        });
        return view.render().then(function() {
          expect(view.$('.show1').length).to.be.equal(1);
          expect(view.$('.show2').length).to.be.equal(0);
          return done();
        });
      });
      return it('should conditionally render by view function', function(done) {
        var MyView, view;
        MyView = (function(_super) {

          __extends(MyView, _super);

          function MyView() {
            return MyView.__super__.constructor.apply(this, arguments);
          }

          MyView.prototype.show1 = function() {
            return true;
          };

          MyView.prototype.show2 = function() {
            return false;
          };

          MyView.prototype.render = function() {
            return this.renderDOM("<div>\n  <div if=\"show1\" class=\"show1\"></div>\n  <div if=\"show2\" class=\"show2\"></div>\n</div>");
          };

          return MyView;

        })(View);
        view = new MyView();
        return view.render().then(function() {
          expect(view.$('.show1').length).to.be.equal(1);
          expect(view.$('.show2').length).to.be.equal(0);
          return done();
        });
      });
    });
  });
});
